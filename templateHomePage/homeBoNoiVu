TEMPLATE HOME BO NOI VU
//HTML

<div class="bnv-wrapper container">
	<div class="row">
		<div class="col-sm-8 group-col">
			<div class="row">
				<div class="col-sm-6">
					<div class="search-box">
						<div class="mTitle">Tra cứu hồ sơ trực tuyến</div>
						<div class="search">
							<input type="text" class="form-control" placeholder="Nhập mã số hồ sơ" id="keyword" name="keyword">
							<input name="secretKey" type="hidden" value="OPENCPSV2">
							<button type="button" onclick="window.location.href='/web/cong-dvc-bnv/kios#/tra-cuu-ho-so-homepage?keyword=' + document.getElementById('keyword').value "><i class="fa fa-search"></i></button>
						</div>
						<div class="note">* Nhập mã số hồ sơ mà đơn vị nhận được từ hệ thống hoặc cơ quan chức năng sau khi đăng ký hồ sơ thành công</div>
					</div>

					<div class="dvc-submit">
						<div class="mTitle">Dịch vụ công trực tuyến</div>
						<a href="/web/cong-dvc-bnv/thu-tuc-hanh-chinh" class="btn-submit">Nộp hồ sơ trực tuyến</a>
						<div class="note">Nơi thực hiện chức năng “một cửa điện tử” cho phép tiếp nhận, xử lý, chuyển trả kết quả cũng như tra cứu về tình trạng xử lý hồ sơ.</div>
					</div>
				</div>

				<div class="col-sm-6">
					<div class="chart-wrapper">
						<div class="mTitle">Tình hình xử lý hồ sơ năm 2019</div>
					    <!--<div id="piechart" class="chart"></div>-->
						<div id="piechart"></div>
						<div class="layout row wrap mx-2 mb-2" id="notiReport"></div>
					</div>
				</div>
			</div>

			<div class="row">
				<div class="col-sm-12">
					<div class="definition-wrapper">
						<div class="mContent simplebar">
							<p>
								<b>Cổng Một cửa điện tử</b>
								<br>
								Là nơi thực hiện chức năng "Một cửa điện tử" cho phép tiếp nhận, xử lý, chuyển trả kết quả cũng như tra cứu về tình trạng xử lý hồ sơ Thủ tục hành chính các đơn vị thuộc Bộ Nội vụ
							</p>
							<p>
								<b>Dịch vụ công trực tuyến</b>
								<br>
								Là dịch vụ hành chính công và các dịch vụ khác của cơ quan nhà nước được cung cấp cho các tổ chức, cá nhân trên môi trường mạng.
							</p>
							<p>
								<span class="level-1"><span>Mức độ 1:</span></span>&nbsp;&nbsp; Là dịch vụ bảo đảm cung cấp đầy đủ các thông tin về thủ tục hành chính và các văn bản có liên quan quy định về thủ tục hành chính đó.
							</p>
							<p>
								<span class="level-2"><span>Mức độ 2:</span></span>&nbsp;&nbsp; Là dịch vụ công trực tuyến mức độ 1 và cho phép người sử dụng tải về các mẫu văn bản và khai báo để hoàn thiện hồ sơ theo yêu cầu. Hồ sơ sau khi hoàn thiện được gửi trực tiếp hoặc qua đường bưu điện đến cơ quan, tổ chức cung cấp dịch vụ.
							</p>
							<p>
								<span class="level-3"><span>Mức độ 3:</span></span>&nbsp;&nbsp; Là dịch vụ công trực tuyến mức độ 2 và cho phép người sử dụng điền và gửi trực tuyến các mẫu văn bản đến cơ quan, tổ chức cung cấp dịch vụ. Các giao dịch trong quá trình xử lý hồ sơ và cung cấp dịch vụ được thực hiện trên môi trường mạng. Việc thanh toán lệ phí (nếu có) và nhận kết quả được thực hiện trực tiếp tại cơ quan, tổ chức cung cấp dịch vụ.
							</p>
							<p>
								<span class="level-4"><span>Mức độ 4:</span></span>&nbsp;&nbsp; Là dịch vụ công trực tuyến mức độ 3 và cho phép người sử dụng thanh toán lệ phí (nếu có) được thực hiện trực tuyến. Việc trả kết quả có thể được thực hiện trực tuyến, gửi trực tiếp hoặc qua đường bưu điện đến người sử dụng.
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="col-sm-4">
			<div class="login-wrapper">
				<!-- <div class="mTitle">Đăng nhập tài khoản</div>
				<div id="react-root">
					<div id="app_login"></div>
				</div> -->
				<a href="/web/cong-dvc-bnv/dang-ky#/login-dichvucong" class="btn_login">Đăng nhập</a>
				<a href="/web/cong-dvc-bnv/dang-ky" class="btn_register">Đăng ký</a>
			</div>
			
			<div class="special-note">Đăng ký tài khoản công dân, doanh nghiệp điện tử giúp nộp hồ sơ trực tuyến và dễ dàng quản lý, theo dõi các hồ sơ hành chính công với Bộ Nội vụ.</div>

			<div class="dossier-result-wrapper">
				<div class="mTitle">Hồ sơ đã có kết quả</div>
				<!--<div class="search-box">-->
				<!--	<div class="search mx-3">-->
				<!--		<input type="text" class="form-control" placeholder="Nhập mã số hồ sơ/ tên chủ hồ sơ" id="keywordDossier" name="keywordDossier">-->
				<!--		<button id="searchDossier" type="button" onclick="getDossierRelease()"><i class="fa fa-search"></i></button>-->
				<!--	</div>-->
				<!--</div>-->
				<div id="dossierReleased"></div>
			</div>
		</div>
	</div>
</div>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript" src="https://vietopencps.github.io/frontend-opencps-v2.1/o/opencps-frontend-cli/login/app/js/app.js"></script>
<script type="text/javascript" src="https://vietopencps.github.io/frontend-opencps-v2.1/o/opencps-frontend-cli/login/app/js/chunk-vendors.js"></script>
<script>
  var portalUrl = window.themeDisplay.getPortalURL();
if (window.themeDisplay.isSignedIn() && window.location.href === portalUrl + '/web/cong-dvc-bnv') {
  window.location.href = portalUrl + '/web/cong-dvc-bnv/dich-vu-cong'
}
  var dossierRelease = []
  var yearReport = (new Date()).getFullYear()
  var colorLabel = ['#3366cc','#da3912','#ff9900','#980098','#0099c6','#dd4477','#66aa00','#b82e2e','#316395','#994499','#1b418e'];
  var dataPie = [
    ['Tổng', 'Số lượng'],
    ['Đang xử lý còn hạn', 0],
    ['Đang xử lý quá hạn', 0],
    ['Đang bổ sung điều kiện', 0],
    ['Đã giải quyết sớm hạn', 0],
    ['Đã giải quyết đúng hạn', 0],
    ['Đã giải quyết quá hạn', 0],
    ['Rút không giải quyết', 0]
  ]
  var totalCount = 0
  var getDataReport = function(){
    $.ajax({
      url: '/o/rest/statistics?domain=total&agency=total&month=0&year=' + yearReport,
      dataType: 'json',
      type: 'GET',
      async: false,
      headers: {
        'groupId': window.themeDisplay ? window.themeDisplay.getScopeGroupId(): ''
      },
      success: function (result) {
        var length = dataPie.length
    		if (result.data) {
          let dataReport = result.data[0]
          dataPie[1][1] = dataReport.undueCount
          dataPie[2][1] = dataReport.overtimeCount
          dataPie[3][1] = dataReport.waitingCount
          dataPie[4][1] = dataReport.betimesCount
          dataPie[5][1] = dataReport.ontimeCount
          dataPie[6][1] = dataReport.overdueCount
          dataPie[7][1] = dataReport.cancelledCount
          $(dataPie).each(function(index, item){
            totalCount += Number(dataPie[index][1])
          })
    		}
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        renderNotiReport()
      },
      error: function (xhr) {
        if (totalCount == 0) {
  			  dataPie[dataPie.length - 1][1] = 1
  			}
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        renderNotiReport()
      }
    })
  }
  function drawChart() {
    var data = google.visualization.arrayToDataTable(dataPie);
    var options = {
      pieSliceText: 'value',
      colors: colorLabel,
      legend: 'none',
      backgroundColor: 'transparent',
      width:500,
      chartArea: {width:'100%'},
      // tooltip: {trigger: 'none'}
    };
    var chart = new google.visualization.PieChart(document.getElementById('piechart'));
    chart.draw(data, options);
  }
  function renderNotiReport () {
    var htmlNotiReport = ""
    for (var i = 1; i <= dataPie.length - 1; i++) {
    	htmlNotiReport += '<div class="flex" style="width:50%;margin-top: 3px;"><span style="width: 11px; height: 11px;font-size: 11px; background: '+ colorLabel[i-1] + '; border-radius: 50%; display: inline-block;"></span><span style="padding-left: 10px;color:black;font-size: 10pt">' + dataPie[i][0] + '</span></div>'
    }
    $('#notiReport').html(htmlNotiReport)
  }
  getDataReport();
  
  // 
  $("#keywordDossier").keyup(function(event) {
		if (event.keyCode === 13) {
			event.preventDefault();
			$("#searchDossier").click();
		}
	});
  function getDossierRelease () {
    $.ajax({
      url: '/o/rest/v2/dossiers/publish/searchDossiers?step=300,310,400&keyword=' + $('#keywordDossier').val(),
      dataType: 'json',
      type: 'GET',
      async: false,
      headers: {
        'groupId': window.themeDisplay ? window.themeDisplay.getScopeGroupId(): ''
      },
      success: function (result) {
    		if (result.data) {
  				dossierRelease = result.data
  				renderListDossier()
    		}
      },
      error: function (xhr) {
      }
    })
  }
  function renderListDossier () {
    var htmlList = ""
  	var htmlWrap = ""
    for (var i = 0; i < dossierRelease.length; i++) {
    	htmlList += '<li><b>' + dossierRelease[i]['dossierNo'] + '</b> - <span>' + dossierRelease[i]['applicantName'] + '</span><br>(' + dossierRelease[i]['releaseDate'].split(' ')[0] + ')</li>'
  	}
  	if (dossierRelease.length > 10) {
  		htmlWrap = '<ul>' + htmlList + '</ul>'
  	} else {
  		htmlWrap = '<ul class="lContent">' + htmlList + '</ul>'
  	}
    $('#dossierReleased').html(htmlWrap)
  }
  getDossierRelease()
  //$('.definition-wrapper .mContent').attr('data-simplebar', '');
</script>

//////////////////////


#content {
	background: url('/o/bonoivu-theme/images/bg_content.png') center center no-repeat;
	background-size: cover;
}
.bnv-wrapper {
	padding: 15px 15px 30px !important;
}
.bnv-wrapper .mTitle {
	color: #0072bc;
	font-weight: bold;
	text-transform: uppercase;
	margin: 15px 0;
	font-size: 18px;
}
.bnv-wrapper .group-col > div {
	display: -webkit-box;
	display: flex;
}
.bnv-wrapper .search-box .search {
	position: relative;
	margin-bottom: 15px;
}
.search-box .search button {
  z-index: 10;
}
.bnv-wrapper .search-box input {
	background-color: transparent;
	border: 1px solid #0072bc;
	border-radius: 4px;
	width: 100%;
	height: 34px;
}
.bnv-wrapper .search-box button {
	width: 34px;
	height: 34px;
	position: absolute;
	top: 0;
	right: 0;
	color: #0072bc;
	line-height: 0;
	font-size: 18px;
	background-color: transparent;
	border: 0;
}
.bnv-wrapper .note {
	font-style: italic;
}
.bnv-wrapper .search-box .note {
	margin-bottom: 15px;
}
.bnv-wrapper .btn-submit {
	display: block;
	text-align: center;
	font-weight: bold;
	background: url('/o/bonoivu-theme/images/bg_btn.png') left center repeat-x;
	background-size: auto 100%;
	padding: 10px 0;
	margin-bottom: 15px;
	color: white;
}
.bnv-wrapper .chart-wrapper {
	background-color: white;
	height: 100%;
	padding-top: 15px;
}
.bnv-wrapper .chart-wrapper .mTitle {
	text-align: center;
	margin-top: 0;
}
.bnv-wrapper .chart-wrapper .chart {
	height: 270px;
}
.bnv-wrapper .definition-wrapper {
	border: 1px solid #e1e1e1;
	background-color: white;
	margin-top: 20px;
	color: #0072bc;
}
.bnv-wrapper .definition-wrapper .mContent {
	/*height: 355px;*/
	padding: 15px 0;
}
.bnv-wrapper .definition-wrapper p {
	padding: 0 30px 0 15px;
}
.bnv-wrapper .definition-wrapper span {
	font-weight: 600;
}
.bnv-wrapper .dossier-result-wrapper {
	-webkit-box-shadow: 0 0 5px rgba(0,0,0,0.3);
	box-shadow: 0 0 5px rgba(0,0,0,0.3);
	color: #0072bc;
	border-top: 1px solid #0072bc;
	background-color: #f8f8f8;
	overflow: hidden;
}
.bnv-wrapper .dossier-result-wrapper .mTitle {
	padding: 15px 0 5px 15px;
  position: relative;
  background-color: #f8f8f8;
  margin: 0;
  z-index: 1;
  border-bottom: 1px solid #0072bc;
}
.bnv-wrapper .dossier-result-wrapper .mTitle:before {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	width: 235px;
	height: 5px;
	background-color: #0072bc;
}
.bnv-wrapper .dossier-result-wrapper #dossierReleased {
	padding: 15px 15px 15px;
	height: 590px;
	overflow: hidden;
}
#dossierReleased ul{
  list-style: none;
  padding-left: 0px;
}
.bnv-wrapper .dossier-result-wrapper .mContent {
  animation: marquee 30s linear infinite;
}
.bnv-wrapper .dossier-result-wrapper li:not(:last-child) {
	margin-bottom: 10px;
}
.bnv-wrapper .login-wrapper {
    display: -webkti-box;
    display: flex;
    -webkit-justify-content: space-between;
    justify-content: space-between;
}
.bnv-wrapper .login-wrapper a {
	background-color: #02acdb;
	color: white;
	padding: 8px 30px;
    border-radius: 2px;
    margin-bottom: 15px;
    display: block;
    width: calc((100% - 15px) / 2);
    text-align: center;
    font-weight: bold;
}
.bnv-wrapper .login-wrapper a:hover {
	color: white;
	background-color: #0072bc;
}
#piechart {
  display: inline-block;
  margin-top: -30px;
  margin-left: -70px;
  margin-bottom: -10px;
}
@keyframes marquee {
    0%   { transform: translate(0, 100%); }
    100% { transform: translate(0, -100%); }
}
.bnv-wrapper .special-note {
	font-weight: bold;
    color: #0072bc;
    line-height: normal;
    margin-bottom: 30px;
    margin-top: 15px;
}
.bnv-wrapper [class*="level-"] {
    color: white;
    padding: 2px 12px;
    transform: skew(-30deg);
    display: inline-block;
}
.bnv-wrapper [class*="level-"] span {
	transform: skew(30deg);
	display: block;
}
.bnv-wrapper .level-1 {
	background-color: #114ca7;
}
.bnv-wrapper .level-2 {
	background-color: #4caf50;
}
.bnv-wrapper .level-3 {
	background-color: #fb8c00;
}
.bnv-wrapper .level-4 {
	background-color: #f44336;
}

//// JS

(function($) {

$.fn.scrollbox = function(config) {
  //default config
  var defConfig = {
    linear: false,          // Scroll method
    startDelay: 2,          // Start delay (in seconds)
    delay: 3,               // Delay after each scroll event (in seconds)
    step: 5,                // Distance of each single step (in pixels)
    speed: 32,              // Delay after each single step (in milliseconds)
    switchItems: 1,         // Items to switch after each scroll event
    direction: 'vertical',
    distance: 'auto',
    autoPlay: true,
    onMouseOverPause: true,
    paused: false,
    queue: null,
    listElement: 'ul',
    listItemElement:'li',
    infiniteLoop: true,     // Infinite loop or not
    switchAmount: 0,        // Give a number if you don't want to have infinite loop
    afterForward: null,     // Callback function after each forward action
    afterBackward: null,    // Callback function after each backward action
    triggerStackable: false // Allow triggers when action is not finish yet
  };
  config = $.extend(defConfig, config);
  config.scrollOffset = config.direction === 'vertical' ? 'scrollTop' : 'scrollLeft';
  if (config.queue) {
    config.queue = $('#' + config.queue);
  }

  return this.each(function() {
    var container = $(this),
        containerUL,
        scrollingId = null,
        nextScrollId = null,
        paused = false,
        releaseStack,
        backward,
        forward,
        resetClock,
        scrollForward,
        scrollBackward,
        forwardHover,
        pauseHover,
        switchCount = 0,
        stackedTriggerIndex = 0;

    if (config.onMouseOverPause) {
      container.bind('mouseover', function() { paused = true; });
      container.bind('mouseout', function() { paused = false; });
    }
    containerUL = container.children(config.listElement + ':first-child');

    // init default switchAmount
    if (config.infiniteLoop === false && config.switchAmount === 0) {
      config.switchAmount = containerUL.children().length;
    }

    scrollForward = function() {
      if (paused) {
        return;
      }
      var curLi,
          i,
          newScrollOffset,
          scrollDistance,
          theStep;

      curLi = containerUL.children(config.listItemElement + ':first-child');

      scrollDistance = config.distance !== 'auto' ? config.distance :
        config.direction === 'vertical' ? curLi.outerHeight(true) : curLi.outerWidth(true);

      // offset
      if (!config.linear) {
        theStep = Math.max(3, parseInt((scrollDistance - container[0][config.scrollOffset]) * 0.3, 10));
        newScrollOffset = Math.min(container[0][config.scrollOffset] + theStep, scrollDistance);
      } else {
        newScrollOffset = Math.min(container[0][config.scrollOffset] + config.step, scrollDistance);
      }
      container[0][config.scrollOffset] = newScrollOffset;

      if (newScrollOffset >= scrollDistance) {
        for (i = 0; i < config.switchItems; i++) {
          if (config.queue && config.queue.find(config.listItemElement).length > 0) {
            containerUL.append(config.queue.find(config.listItemElement)[0]);
            containerUL.children(config.listItemElement + ':first-child').remove();
          } else {
            containerUL.append(containerUL.children(config.listItemElement + ':first-child'));
          }
          ++switchCount;
        }
        container[0][config.scrollOffset] = 0;
        clearInterval(scrollingId);
        scrollingId = null;

        if ($.isFunction(config.afterForward)) {
          config.afterForward.call(container, {
            switchCount: switchCount,
            currentFirstChild: containerUL.children(config.listItemElement + ':first-child')
          });
        }
        if (config.triggerStackable && stackedTriggerIndex !== 0) {
          releaseStack();
          return;
        }
        if (config.infiniteLoop === false && switchCount >= config.switchAmount) {
          return;
        }
        if (config.autoPlay) {
          nextScrollId = setTimeout(forward, config.delay * 1000);
        }
      }
    };

    // Backward
    // 1. If forwarding, then reverse
    // 2. If stoping, then backward once
    scrollBackward = function() {
      if (paused) {
        return;
      }
      var curLi,
          i,
          newScrollOffset,
          scrollDistance,
          theStep;

      // init
      if (container[0][config.scrollOffset] === 0) {
        for (i = 0; i < config.switchItems; i++) {
          containerUL.children(config.listItemElement + ':last-child').insertBefore(containerUL.children(config.listItemElement+':first-child'));
        }

        curLi = containerUL.children(config.listItemElement + ':first-child');
        scrollDistance = config.distance !== 'auto' ?
            config.distance :
            config.direction === 'vertical' ? curLi.height() : curLi.width();
        container[0][config.scrollOffset] = scrollDistance;
      }

      // new offset
      if (!config.linear) {
        theStep = Math.max(3, parseInt(container[0][config.scrollOffset] * 0.3, 10));
        newScrollOffset = Math.max(container[0][config.scrollOffset] - theStep, 0);
      } else {
        newScrollOffset = Math.max(container[0][config.scrollOffset] - config.step, 0);
      }
      container[0][config.scrollOffset] = newScrollOffset;

      if (newScrollOffset === 0) {
        --switchCount;
        clearInterval(scrollingId);
        scrollingId = null;

        if ($.isFunction(config.afterBackward)) {
          config.afterBackward.call(container, {
            switchCount: switchCount,
            currentFirstChild: containerUL.children(config.listItemElement + ':first-child')
          });
        }
        if (config.triggerStackable && stackedTriggerIndex !== 0) {
          releaseStack();
          return;
        }
        if (config.autoPlay) {
          nextScrollId = setTimeout(forward, config.delay * 1000);
        }
      }
    };

    releaseStack = function () {
      if (stackedTriggerIndex === 0) {
        return;
      }
      if (stackedTriggerIndex > 0) {
        stackedTriggerIndex--;
        nextScrollId = setTimeout(forward, 0);
      } else {
        stackedTriggerIndex++;
        nextScrollId = setTimeout(backward, 0);
      }
    };

    forward = function() {
      clearInterval(scrollingId);
      scrollingId = setInterval(scrollForward, config.speed);
    };

    backward = function() {
      clearInterval(scrollingId);
      scrollingId = setInterval(scrollBackward, config.speed);
    };

    // Implements mouseover function.
    forwardHover = function() {
        config.autoPlay = true;
        paused = false;
        clearInterval(scrollingId);
        scrollingId = setInterval(scrollForward, config.speed);
    };
    pauseHover = function() {
        paused = true;
    };

    resetClock = function(delay) {
      config.delay = delay || config.delay;
      clearTimeout(nextScrollId);
      if (config.autoPlay) {
        nextScrollId = setTimeout(forward, config.delay * 1000);
      }
    };

    if (config.autoPlay) {
      nextScrollId = setTimeout(forward, config.startDelay * 1000);
    }

    // bind events for container
    container.bind('resetClock', function(delay) { resetClock(delay); });
    container.bind('forward', function() {
      if (config.triggerStackable) {
        if (scrollingId !== null) {
          stackedTriggerIndex++;
        } else {
          forward();
        }
      } else {
        clearTimeout(nextScrollId);
        forward();
      }
    });
    container.bind('backward', function() {
      if (config.triggerStackable) {
        if (scrollingId !== null) {
          stackedTriggerIndex--;
        } else {
          backward();
        }
      } else {
        clearTimeout(nextScrollId);
        backward();
      }
    });
    container.bind('pauseHover', function() { pauseHover(); });
    container.bind('forwardHover', function() { forwardHover(); });
    container.bind('speedUp', function(event, speed) {
      if (speed === 'undefined') {
        speed = Math.max(1, parseInt(config.speed / 2, 10));
      }
      config.speed = speed;
    });

    container.bind('speedDown', function(event, speed) {
      if (speed === 'undefined') {
        speed = config.speed * 2;
      }
      config.speed = speed;
    });

    container.bind('updateConfig', function (event, options) {
        config = $.extend(config, options);
    });

  });
};
$('#dossierReleased').scrollbox({switchItems: 3,});
}(jQuery));